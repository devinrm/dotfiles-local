" Don't load ctrlp
let g:loaded_ctrlp = 1

" Enables a menu at the bottom of the vim window.
set wildmenu
set wildmode=longest:full,full

set undodir=$HOME/.undodir
set undofile

" copy paste to clipboard
set clipboard=unnamed

" highlight search results
set hlsearch

" case insensitive pattern matching
set ignorecase

" overrides ignorecase if pattern contains upcase
set smartcase

" Ignore stuff that can't be opened
set wildignore+=tmp/**

" Set region to US English
set spelllang=en_us

" Window size
set winwidth=84
set winheight=10
set winminheight=10
set winheight=999

" Replace all matches on a line instead of just the first
set gdefault

" Pull from keywords in the current file and from the current tags file
set complete=.,b,u,]

" Shows menu and any addition tips
set completeopt=menu,preview

" Get the best of both worlds with set number and relativenumber
set relativenumber
set number
autocmd InsertEnter * :set number norelativenumber
autocmd InsertLeave * :set relativenumber

" Colorscheme and lightline config
let g:lightline = {
      \ 'colorscheme': 'onedark',
      \ 'active': {
      \   'left': [
      \             ['mode', 'paste'],
      \             ['fugitive', 'readonly', 'filename', 'modified']
      \           ]
      \ },
      \ 'component': {
      \   'readonly': '%{&readonly?"⭤":""}',
      \ },
      \ 'component_function': {
      \   'modified': 'LightLineModified',
      \   'fugitive': 'LightLineFugitive',
      \   'filename': 'LightLineFilename',
      \   'fileformat': 'LightLineFileformat',
      \   'filetype': 'LightLineFiletype',
      \   'fileencoding': 'LightLineFileencoding',
      \   'mode': 'LightLineMode'
      \ },
  \}

function! LightLineFilename()
  let git_root = fnamemodify(fugitive#extract_git_dir(expand("%:p")), ":h")

  if expand("%:t") == ""
    return "[No Name]"
  elseif git_root != "" && git_root != "."
    return substitute(expand("%:p"), git_root . "/", "", "")
  else
    return expand("%:p")
  endif
endfunction

function! LightLineFugitive()
  if exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? _ : ''
  endif
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

colorscheme onedark

" Use thoughtbot's Markoff for markdown previews
let g:marked_app = 'Markoff'

" Vim Dispatch
let g:rspec_command = "Dispatch rspec {spec}"
let test#strategy = "dispatch"

" Map Ctrl-s to write the file
nmap <C-a> :w<cr>
imap <C-a> <esc>:w<cr>

" Map Ctrl-t to open new tab
map <C-t> <esc>:tabnew<CR>

" Source (reload) your vimrc. Type space, s, o in sequence to trigger
nmap <leader>re :source $MYVIMRC<cr>
nmap <leader>vr :sp $MYVIMRC<cr>
nmap <leader>re :source $MYVIMRC<cr>

" Pre-populate a split command with the current directory
nmap <Leader>v :new <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>
nmap <Leader>vn :vnew <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>

" Copy the entire buffer into the system register (from @R00k)
nmap <Leader>co mmggVG"*y`m

" Edit the db/schema.rb Rails file in a split
nmap <Leader>sc :split db/schema.rb<cr>

" Indent the whole file
map <Leader>i mmgg=G`m

" Set paste so paste works properly
map <Leader>p :set paste<CR><esc>"*]p:set nopaste<cr>

" Run vimscript functions
map <Leader>x :exec getline(".")<cr>

" Toggle spell checking on and off
nmap <silent> <leader>, :set spell!<CR>

" View commits in fzf
nmap <Leader>c :Commits<cr>

" Require pry (from @christoomey)
nmap <leader>b orequire 'pry'; binding.pry<esc>^

" Have tmux-runner open pry session
nnoremap <leader>pry :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'pry'}<cr>

" Convert Ruby 1.8 to 1.9 Hash Syntax
map <Leader>h :%s/:\([^ ]*\)\(\s*\)=>/\1:/g<cr>

" Replace with register
nmap <leader>gr "*gr<cr>

" Code notes
map <Leader>cn :Sex ~/code/notes/<cr>

" Vim-tmux-runner
nnoremap <leader>fr :VtrFocusRunner<CR>
nnoremap <leader>sr :VtrSendLinesToRunner<CR>
nnoremap <leader>ap :VtrAttachToPane<CR>
nnoremap <leader>se :VtrSendCommand<CR>
nnoremap <leader>sf :VtrSendFile<CR>
nnoremap <leader>osr :VtrOpenRunner { 'orientation': 'h', 'percentage': 50 }<cr>

" Search words with Ag
nmap <Leader>g :Ag<space>

" Open .html pages from vim in browser
map <silent> <F10> :!open '%'<cr>

" Comment/un-comment like Sublime (from @geoffharcourt)
nnoremap <C-\> :TComment<CR>
vnoremap <C-\> :TComment<CR>

" Use C-Space to Esc out of any mode (from @christoomey)
nnoremap <C-Space> <Esc>:noh<CR>
vnoremap <C-Space> <Esc>gV
onoremap <C-Space> <Esc>
cnoremap <C-Space> <C-c>
inoremap <C-Space> <Esc>`^
" oTerminal sees <C-@> as <C-space> WTF, but ok
nnoremap <C-@> <Esc>:noh<CR>
vnoremap <C-@> <Esc>gV
onoremap <C-@> <Esc>
cnoremap <C-@> <C-c>
inoremap <C-@> <Esc>`^

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" Easy access to the start of the line
nmap 0 ^

" Search with fzf
map <C-p> :Files<cr>
nmap <C-p> :Files<cr>
map <C-o> :BLines<cr>
nmap <C-o> :BLines<cr>

" Complete from open tmux panes (from @junegunn)
inoremap <expr> <C-x><C-i> fzf#complete('tmuxwords.rb --all-but-current --scroll 499 --min 5')
inoremap <expr> <C-x><C-k> fzf#complete('cat /usr/share/dict/words')

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" Fzf tags
map <leader>tg :Tags<cr>

" Mappings to move lines. Symbols represent 'alt' because macs are insane
" 'j' = '∆' and 'k' = '˚'
" http://stackoverflow.com/questions/7501092/can-i-map-alt-key-in-vim
nnoremap ˚ :m .-2<CR>==
nnoremap ∆ :m .+1<CR>==
inoremap ˚ <Esc>:m .-2<CR>==gi
inoremap ∆ <Esc>:m .+1<CR>==gi
vnoremap ˚ :m '>-2<CR>gv=gv
vnoremap ∆ :m '<+1<CR>gv=gv

" Make yank behave like yank should
vnoremap <expr>y "my\"" . v:register . "y`y"

" Remap V to v
nnoremap v V

" Remap esc to ii
imap ii <esc>

"Vim-tmux-navigator mappings
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
" nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

let g:tmux_navigator_save_on_switch = 1

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" map <ctrl>c to quit
map <c-c> :q<cr>

" Allow us to use Ctrl-s and Ctrl-q as keybinds
silent !stty -ixon

" Restore default behaviour when leaving Vim.
autocmd VimLeave * silent !stty ixon

" Make n N nicer
function! s:nice_next(cmd)
  let view = winsaveview()
  execute "normal! " . a:cmd
  if view.topline != winsaveview().topline
    normal! zz
  endif
endfunction

nnoremap <silent> n :call <SID>nice_next('n')<cr>
nnoremap <silent> N :call <SID>nice_next('N')<cr>

" Make it clear where 80 columns is.
highlight ColorColumn ctermbg=237

" This changes the color of the comments.
highlight Comment ctermfg=104

" This gets rid of the jet black reflective background
highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE

" This statement has to come late in order to work (from @geoffharcourt)
highlight Comment cterm=italic

let g:syntastic_haml_checkers = ['haml_lint']

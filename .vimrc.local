" Don't load
let g:loaded_ctrlp = 1
let g:loaded_syntastic = 1

" nvim gui colors
set termguicolors

" Enables a menu at the bottom of the vim window.
set wildmenu
set wildmode=longest:full,full

set undodir=$HOME/.undodir
set undofile

" copy paste to clipboard
set clipboard=unnamed

" highlight search results
set hlsearch

" Speed up escape after (){} chars
set matchtime=0

" case insensitive pattern matching
set ignorecase

" overrides ignorecase if pattern contains upcase
set smartcase

" Ignore stuff that can't be opened
set wildignore+=tmp/**

" Set region to US English
set spelllang=en_us

" Window size
set winwidth=84
set winheight=10
set winminheight=10
set winheight=999

" Replace all matches on a line instead of just the first
set gdefault

" Pull from keywords in the current file and from the current tags file
set complete=.,b,u,w,t,]
set complete+=k~/.vim/dictionaries/array_methods.txt
set complete+=k~/.vim/dictionaries/float_methods.txt
set complete+=k~/.vim/dictionaries/hash_methods.txt
set complete+=k~/.vim/dictionaries/integer_methods.txt
set complete+=k~/.vim/dictionaries/string_methods.txt
set complete+=k~/.vim/dictionaries/rails_controller_completions.txt
set complete+=k~/.vim/dictionaries/rails_mailer_completions.txt
set complete+=k~/.vim/dictionaries/rails_migration_completions.txt
set complete+=k~/.vim/dictionaries/rails_model_completions.txt
set complete+=k~/.vim/dictionaries/rails_spec_completions.txt
set complete+=k~/.vim/dictionaries/ruby_template_completions.txt
set complete+=k~/.vim/dictionaries/capybara_matchers.txt

" Shows menu and any addition tips
set completeopt=menu,preview

" Get the best of both worlds with set number and relativenumber
set relativenumber
set number
autocmd InsertEnter * :set number norelativenumber
autocmd InsertLeave * :set relativenumber

" Colorscheme and lightline config
let g:lightline = {
      \ 'colorscheme': 'Tomorrow_Night',
      \ 'active': {
      \   'left': [
      \             ['mode', 'paste'],
      \             ['fugitive', 'readonly', 'myfilename', 'modified']
      \           ]
      \ },
      \ 'component': {
      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}',
      \   'readonly': '%{(&filetype!="help" && &readonly) ? emoji#for("lock") : ""}',
      \ },
      \ 'component_function': {
      \   'myfilename': 'LightLineFilename',
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
      \ }
\ }

function! LightLineFilename()
  let git_root = fnamemodify(fugitive#extract_git_dir(expand("%:p")), ":h")

  if expand("%:t") == ""
    return "[No Name]"
  elseif git_root != "" && git_root != "."
    return substitute(expand("%:p"), git_root . "/", "", "")
  else
    return expand("%:p")
  endif
endfunction

set background=dark
colorscheme Tomorrow-Night

" Use thoughtbot's Markoff for markdown previews
let g:marked_app = 'Markoff'

" Vim Dispatch
" let g:rspec_command = "Dispatch rspec {spec}"
let test#strategy = "neovim"

let g:colorizer_auto_filetype='sass,scss,css,html,slim,haml'

" Neovim terminal mappings for easy navigation
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Map Ctrl-s to write the file
nmap <leader>w :w<cr>

" Map Ctrl-t to open new tab
map <C-t> <esc>:tabnew<CR>

" Open terminal in NeoVim
map <leader>r :sp<cr>:terminal<cr>

" Source (reload) your vimrc. Type space, s, o in sequence to trigger
nmap <leader>re :source $MYVIMRC<cr>
nmap <leader>vr :sp $MYVIMRC<cr>
nmap <leader>re :source $MYVIMRC<cr>

" Pre-populate a split command with the current directory
nmap <Leader>v :new <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>
nmap <Leader>vn :vnew <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>

" Copy the entire buffer into the system register (from @R00k)
nmap <Leader>co mmggVG"*y`m

" Edit the db/schema.rb Rails file in a split
nmap <Leader>sc :split db/schema.rb<cr>

" Indent the whole file
map <Leader>i mmgg=G`m

" Set paste so paste works properly
map <Leader>p :set paste<CR><esc>"*]p:set nopaste<cr>

" Run vimscript functions
map <Leader>x :exec getline(".")<cr>

" Toggle spell checking on and off
nmap <silent> <leader>, :set spell!<CR>

" View commits in fzf
nmap <Leader>c :Commits<cr>

" Require pry (from @christoomey)
nmap <leader>b orequire 'pry'; binding.pry<esc>^

" Have tmux-runner open pry session
nnoremap <leader>pry :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'pry'}<cr>

" Convert Ruby 1.8 to 1.9 Hash Syntax
map <Leader>h :%s/:\([^ ]*\)\(\s*\)=>/\1:/g<cr>

" Replace with register
nmap <leader>gr "*gr<cr>

" Code notes
map <Leader>cn :Sex ~/code/notes/<cr>

" Vim-tmux-runner
nnoremap <leader>fr :VtrFocusRunner<CR>
nnoremap <leader>sr :VtrSendLinesToRunner<CR>
nnoremap <leader>ap :VtrAttachToPane<CR>
nnoremap <leader>se :VtrSendCommand<CR>
nnoremap <leader>sf :VtrSendFile<CR>
nnoremap <leader>osr :VtrOpenRunner { 'orientation': 'h', 'percentage': 50 }<cr>

" Search words with Ag
nmap <Leader>g :Ag<space>

" Open .html pages from vim in browser
map <silent> <F10> :!open '%'<cr>

" Comment/un-comment like Sublime (from @geoffharcourt)
nnoremap <C-\> :TComment<CR>
vnoremap <C-\> :TComment<CR>

" Use C-Space to Esc out of any mode (from @christoomey)
nnoremap <C-Space> <Esc>:noh<CR>
vnoremap <C-Space> <Esc>gV
onoremap <C-Space> <Esc>
cnoremap <C-Space> <C-c>
inoremap <C-Space> <Esc>`^
" oTerminal sees <C-@> as <C-space> WTF, but ok
nnoremap <C-@> <Esc>:noh<CR>
vnoremap <C-@> <Esc>gV
onoremap <C-@> <Esc>
cnoremap <C-@> <C-c>
inoremap <C-@> <Esc>`^

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" Easy access to the start of the line
nmap 0 ^

" Search with fzf
map <C-p> :Files<cr>
nmap <C-p> :Files<cr>
map <C-o> :BLines<cr>
nmap <C-o> :BLines<cr>

" Complete from open tmux panes (from @junegunn)
inoremap <expr> <C-x><C-i> fzf#complete('tmuxwords.rb --all-but-current --scroll 499 --min 5')
inoremap <expr> <C-x><C-k> fzf#complete('cat /usr/share/dict/words')

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" Fzf tags
map <leader>tg :Tags<cr>

" Mappings to move lines. Symbols represent 'alt' because macs are insane
" 'j' = '∆' and 'k' = '˚'
" http://stackoverflow.com/questions/7501092/can-i-map-alt-key-in-vim
nnoremap ˚ :m .-2<CR>==
nnoremap ∆ :m .+1<CR>==
inoremap ˚ <Esc>:m .-2<CR>==gi
inoremap ∆ <Esc>:m .+1<CR>==gi
vnoremap ˚ :m '>-2<CR>gv=gv
vnoremap ∆ :m '<+1<CR>gv=gv

" Make yank behave like yank should
vnoremap <expr>y "my\"" . v:register . "y`y"

" map visual-block to v
map v <c-v>e

" Remap esc to ii
imap ii <esc>

"Vim-tmux-navigator mappings
let g:tmux_navigator_no_mappings = 1

" To use c-h in neovim on OS X
" (https://github.com/neovim/neovim/issues/2048#issuecomment-78045837):
" infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > $TERM.ti
" tic $TERM.ti
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
" nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

let g:tmux_navigator_save_on_switch = 1

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" map <ctrl>c to quit
map <c-c> :q<cr>

" Align GitHub-flavored Markdown tables
au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

" Make n N nicer
function! s:nice_next(cmd)
  let view = winsaveview()
  execute "normal! " . a:cmd
  if view.topline != winsaveview().topline
    normal! zz
  endif
endfunction

nnoremap <silent> n :call <SID>nice_next('n')<cr>
nnoremap <silent> N :call <SID>nice_next('N')<cr>

" Vim-Conflicted
set stl+=%{ConflictedVersion()}

" Syntastic
" map <leader>o :Errors<cr>
"
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
"
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_check_on_open = 1
" let g:syntastic_aggregate_errors = 1
" let g:syntastic_error_symbol = '✗'
" let g:syntastic_warning_symbol = '⚠'
" let g:syntastic_loc_list_height = 3
"
" let g:syntastic_haml_checkers = ['haml_lint', 'haml']
" let g:syntastic_html_checkers = ['jshint']
" let g:syntastic_scss_checkers = ['scss_lint']
" let g:syntastic_sass_checkers = ['sass-lint', 'sass_lint']
" let g:syntastic_css_checkers = ['csslint']
" let g:syntastic_javascript_checkers = ['eslint', 'jshint']
" let g:syntastic_ruby_checkers = ['mri', 'rubylint', 'rubocop']
" let g:syntastic_slim_checkers = ['slim_lint']
" let g:syntastic_elixir_checkers = ['elixir']

" Neomake
map <leader>o :lopen<cr>
map <leader>oo :lclose<cr>
autocmd! BufWritePost,BufEnter * Neomake

let g:neomake_javascript_enabled_makers = ['eslint', 'jshint']
let g:neomake_scss_enabled_makers = ['scsslint']
let g:neomake_css_enabled_makers = ['csslint']
let g:neomake_markdown_enabled_makers = ['mdl']
let g:neomake_ruby_enabled_makers = ['mri', 'rubocop']
let g:neomake_html_enabled_makers = ['htmlhint']
let g:neomake_haml_enabled_makers = ['hamllint']
let g:neomake_slim_enabled_makers = ['slimlint']
let g:neomake_elixir_enabled_makers = ['elixir']

" Make it clear where 80 columns is.
highlight ColorColumn ctermbg=237
" neovim
highlight ColorColumn guibg=#2a2a2a

highlight VertSplit guibg=#709798
highlight VertSplit guifg=#2D2D2D

" This changes the Visual line color
highlight visual ctermfg=1
" neovim
highlight visual guifg=#D73435

" This statement has to come late in order to work (from @geoffharcourt)
highlight Comment cterm=italic

" NeoVim term colors
let g:terminal_color_0  = '#2e3436'
let g:terminal_color_1  = '#cc0000'
let g:terminal_color_2  = '#4e9a06'
let g:terminal_color_3  = '#c4a000'
let g:terminal_color_4  = '#3465a4'
let g:terminal_color_5  = '#75507b'
let g:terminal_color_6  = '#0b939b'
let g:terminal_color_7  = '#d3d7cf'
let g:terminal_color_8  = '#555753'
let g:terminal_color_9  = '#ef2929'
let g:terminal_color_10 = '#8ae234'
let g:terminal_color_11 = '#fce94f'
let g:terminal_color_12 = '#729fcf'
let g:terminal_color_13 = '#ad7fa8'
let g:terminal_color_14 = '#00f5e9'
let g:terminal_color_15 = '#eeeeec'

"  ____ ____ ____ ____ ____ ____ ____ ____
" ||s |||e |||t |||t |||i |||n |||g |||s ||
" ||__|||__|||__|||__|||__|||__|||__|||__||
" |/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|

" Don't load
let g:loaded_ctrlp = 1

" Experiment with making netrw a little fancier
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25

" have cursor stay in the middle while scrolling
" set scrolloff=999

" Enables a menu at the bottom of the vim window.
set wildmenu
set wildmode=longest:full,full

set undodir=$HOME/.undodir
set undofile

" copy paste to clipboard
set clipboard=unnamed

" highlight cursorline
set cursorline

" highlight search results
set hlsearch

" Speed up escape after (){} chars
set matchtime=0

" case insensitive pattern matching
set ignorecase

" Fast timeout
set ttimeout

" overrides ignorecase if pattern contains upcase
set smartcase

" Ignore stuff that can't be opened
set wildignore+=tmp/**

" Set region to US English
set spelllang=en_us

" Window size
set winwidth=84
set winheight=10
set winminheight=10
set winheight=999

" Replace all matches on a line instead of just the first
set gdefault

" Pull from keywords in the current file and from the current tags file
set complete=.,b,u,w,t,]
set complete+=k~/.vim/dictionaries/array_methods.txt
set complete+=k~/.vim/dictionaries/float_methods.txt
set complete+=k~/.vim/dictionaries/hash_methods.txt
set complete+=k~/.vim/dictionaries/integer_methods.txt
set complete+=k~/.vim/dictionaries/string_methods.txt
set complete+=k~/.vim/dictionaries/rails_controller_completions.txt
set complete+=k~/.vim/dictionaries/rails_mailer_completions.txt
set complete+=k~/.vim/dictionaries/rails_migration_completions.txt
set complete+=k~/.vim/dictionaries/rails_model_completions.txt
set complete+=k~/.vim/dictionaries/rails_spec_completions.txt
set complete+=k~/.vim/dictionaries/ruby_template_completions.txt
set complete+=k~/.vim/dictionaries/capybara_matchers.txt

" Shows menu and any addition tips
set completeopt=menu,preview

" Get the best of both worlds with set number and relativenumber
set relativenumber
set number
autocmd InsertEnter * :set number norelativenumber
autocmd InsertLeave * :set relativenumber

" Vim-Conflicted
set stl+=%{ConflictedVersion()}

" Colorscheme and lightline config
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [
      \             ['mode', 'paste'],
      \             ['fugitive', 'readonly', 'myfilename', 'modified']
      \           ]
      \ },
      \ 'component': {
      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}',
      \ },
      \ 'component_function': {
      \   'myfilename': 'LightLineFilename',
      \ },
      \ 'component_visible_condition': {
      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
      \ }
      \ }

function! LightLineFilename()
  let git_root = fnamemodify(fugitive#extract_git_dir(expand("%:p")), ":h")

  if expand("%:t") == ""
    return "[No Name]"
  elseif git_root != "" && git_root != "."
    return substitute(expand("%:p"), git_root . "/", "", "")
  else
    return expand("%:p")
  endif
endfunction

" hybrid colo
colorscheme hybrid
let g:hybrid_custom_term_colors = 1
set background=dark

" Use thoughtbot's Markoff for markdown previews
let g:marked_app = 'Markoff'

" Integrate limelight and goyo
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" Vim Dispatch
let g:rspec_command = "Dispatch rspec {spec}"
let test#strategy = "dispatch"
let test#ruby#rspec#executable = 'SPEC_ALL=true bundle exec rspec'

" Colorizer
let g:colorizer_auto_filetype='sass,scss,css,html,slim,haml'

" vcoolor
let g:vcoolor_lowercase = 1
let g:vcoolor_disable_mappings = 1

" Allow JSX in normal JS files
let g:jsx_ext_required = 0

" Syntastic
nnoremap <leader>o :Errors<cr>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_check_on_open = 1
let g:syntastic_aggregate_errors = 1
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_loc_list_height = 3

let g:syntastic_haml_checkers = ['haml_lint', 'haml']
let g:syntastic_html_checkers = ['jshint']
let g:syntastic_scss_checkers = ['scss_lint']
let g:syntastic_sass_checkers = ['sass-lint', 'sass_lint']
let g:syntastic_css_checkers = ['csslint']
let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_slim_checkers = ['slim_lint']
let g:syntastic_elixir_checkers = ['elixir']
let g:syntastic_javascript_checkers = ['eslint', 'jshint']
set autoread

" Omnicompletion
filetype plugin on
set omnifunc=syntaxcomplete#Complete

inoremap <c-c> <c-x><c-o>

" Supertab
" let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
" let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabDefaultCompletionType    = '<C-n>'

" Rainbow Parens
augroup rainbow
  autocmd BufRead,BufNewFile * RainbowParentheses
augroup END

" Startify header
let g:ascii = [
        \ '   ____ ____ ____ ',
        \ '  ||v |||i |||m ||',
        \ '  ||__|||__|||__||',
        \ '  |/__\|/__\|/__\|',
        \ ]
let g:startify_custom_header = g:ascii + startify#fortune#boxed()

" Change vertical split color
highlight VertSplit ctermbg=232
highlight VertSplit ctermfg=165

" Change visual line color
highlight visual ctermfg=1

" This statement has to come late in order to work (from @geoffharcourt)
highlight Comment cterm=italic

"  ____ ____ ____ ____
" ||m |||a |||p |||s ||
" ||__|||__|||__|||__||
" |/__\|/__\|/__\|/__\|

" Open vimrc in new tab
nnoremap <Leader>vi :tabe ~/.vimrc.local<CR>
nnoremap <Leader>vb :tabe ~/.vimrc.bundles.local<CR>

" Source (reload) your vimrc. Type space, s, o in sequence to trigger
nnoremap <leader>re :source $MYVIMRC<cr>
nnoremap <leader>vr :sp $MYVIMRC<cr>
nnoremap <leader>re :source $MYVIMRC<cr>

" Pre-populate a split command with the current directory
nnoremap <Leader>v :new <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>
nnoremap <Leader>vn :vnew <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>

" Copy the entire buffer into the system register (from @R00k)
nnoremap <Leader>co mmggVG"*y`m

" Edit the db/schema.rb Rails file in a split
nnoremap <Leader>sc :split db/schema.rb<cr>

" Indent the whole file
nnoremap <Leader>i mmgg=G`m

" Set paste so paste works properly
nnoremap <Leader>p :set paste<CR><esc>"*]p:set nopaste<cr>

" Run vimscript functions
nnoremap <Leader>x :exec getline(".")<cr>

" Toggle spell checking on and off
nnoremap <silent> <leader>, :set spell!<CR>

" Require pry (from @christoomey)
nnoremap <leader>b orequire 'pry'; binding.pry<esc>^

" Convert Ruby 1.8 to 1.9 Hash Syntax
nnoremap <Leader>h :%s/:\([^ ]*\)\(\s*\)=>/\1:/g<cr>

" Replace with register
nnoremap <leader>gr "*gr<cr>

" Code notes
nnoremap <Leader>cn :Files ~/dotfiles-local/notes/<cr>

" Toggle relative line number for yanking, i.e. :6y
nnoremap <leader>ln :set relativenumber!<cr>

" Make it easier to run ruby files inside vim
nnoremap <Leader>! :!ruby %<cr>

" Open .html pages from vim in browser
nnoremap <leader>ht :!open '%'<cr>

" Comment/un-comment like Sublime (from @geoffharcourt)
nnoremap <C-\> :TComment<CR>
vnoremap <C-\> :TComment<CR>

" Use C-Space to Esc out of any mode (from @christoomey)
nnoremap <C-Space> <Esc>:noh<CR>
vnoremap <C-Space> <Esc>gV
onoremap <C-Space> <Esc>
cnoremap <C-Space> <C-c>
inoremap <C-Space> <Esc>`^
" oTerminal sees <C-@> as <C-space> WTF, but ok
nnoremap <C-@> <Esc>:noh<CR>
vnoremap <C-@> <Esc>gV
onoremap <C-@> <Esc>
cnoremap <C-@> <C-c>
inoremap <C-@> <Esc>`^

" Move up and down by visible lines if current line is wrapped
nnoremap j gj
nnoremap k gk

" Easy access to the start of the line
nnoremap 0 ^

" Search with fzf
nnoremap <C-p> :Files<cr>
nnoremap <C-o> :BLines<cr>
nnoremap <C-b> :Buffers<cr>
nnoremap <C-t> :Tags<cr>

" View commits in fzf
nnoremap <Leader>c :Commits<cr>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" SideSearch current word and return to original window
nnoremap <Leader>ss :SideSearch <C-r><C-w><CR> | wincmd p

" Mappings to move lines. Symbols represent 'alt' because macs are insane
" 'j' = '∆' and 'k' = '˚'
" http://stackoverflow.com/questions/7501092/can-i-map-alt-key-in-vim
nnoremap ˚ :m .-2<CR>==
nnoremap ∆ :m .+1<CR>==
inoremap ˚ <Esc>:m .-2<CR>==gi
inoremap ∆ <Esc>:m .+1<CR>==gi
vnoremap ˚ :m '>-2<CR>gv=gv
vnoremap ∆ :m '<+1<CR>gv=gv

" Make yank behave like yank should
vnoremap <expr>y "my\"" . v:register . "y`y"

" map visual-block to v
nnoremap v <c-v>e

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" map <ctrl>c to quit
nnoremap <c-c> :q<cr>

" Align GitHub-flavored Markdown tables
au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Make n N nicer
function! s:nice_next(cmd)
  let view = winsaveview()
  execute "normal! " . a:cmd
  if view.topline != winsaveview().topline
    normal! zz
  endif
endfunction

nnoremap <silent> n :call <SID>nice_next('n')<cr>
nnoremap <silent> N :call <SID>nice_next('N')<cr>

" Make esc more user friendly
inoremap jk <esc>
inoremap ii <esc>

"  ____ ____ ____ ____
" ||t |||m |||u |||x ||
" ||__|||__|||__|||__||
" |/__\|/__\|/__\|/__\|

" To use c-h in neovim on OS X
" (https://github.com/neovim/neovim/issues/2048#issuecomment-78045837):
" infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > $TERM.ti
" tic $TERM.ti
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
" nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

" Vim-tmux-navigator mappings
let g:tmux_navigator_no_mappings = 1

" Vim-tmux-runner
nnoremap <leader>fr :VtrFocusRunner<CR>
nnoremap <leader>sr :VtrSendLinesToRunner<CR>
nnoremap <leader>ap :VtrAttachToPane<CR>
nnoremap <leader>se :VtrSendCommand<CR>
nnoremap <leader>sf :VtrSendFile<CR>
nnoremap <leader>osr :VtrOpenRunner { 'orientation': 'h', 'percentage': 50 }<cr>

" Complete from open tmux panes (from @junegunn)
inoremap <expr> <C-x><C-i> fzf#complete('tmuxwords.rb --all-but-current --scroll 499 --min 5')
inoremap <expr> <C-x><C-k> fzf#complete('cat /usr/share/dict/words')

" Save on switch
let g:tmux_navigator_save_on_switch = 1

" Have tmux-runner open pry session
nnoremap <leader>pry :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'pry'}<cr>

"  ____ ____ ____ ____ ____ ____
" ||n |||e |||o |||v |||i |||m ||
" ||__|||__|||__|||__|||__|||__||
" |/__\|/__\|/__\|/__\|/__\|/__\|

if has("nvim")

  colorscheme hybrid

  " seoul256 (dark):
  " colo seoul256
  "   Range:   233 (darkest) ~ 239 (lightest)
  "   Default: 237
  " let g:seoul256_background = 235

  " seoul256 (light):
  " colo seoul256-light
  "   Range:   252 (darkest) ~ 256 (lightest)
  "   Default: 253
  " let g:seoul256_light_background = 256

  " Switch
  set background=dark
  " set background=light

  " nvim gui colors
  set termguicolors

  " Change gui vertical split color
  " highlight VertSplit guibg=#242424
  " highlight VertSplit guifg=#139cff

  " highlight cursorline guibg=#3c3c3c

  " Change visual line color (for minimalist theme only)
  highlight visual guifg=#ff0080

  " change color column color
  " highlight ColorColumn guibg=#3c3c3c
  " highlight SignColumn guibg=#222222

  " Neovim terminal mappings for easy navigation
  au BufEnter * if &buftype == 'terminal' | :startinsert | endif
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-l> <C-\><C-n><C-w>l

  " NeoVim term colors
  let g:terminal_color_0  = '#282a2d' " black
  let g:terminal_color_1  = '#a54242' " red
  let g:terminal_color_2  = '#8c9441' " green
  let g:terminal_color_3  = '#de935f' " yellow
  let g:terminal_color_4  = '#5f819d' " blue
  let g:terminal_color_5  = '#85678f' " magenta
  let g:terminal_color_6  = '#5e8d87' " cyan
  let g:terminal_color_7  = '#707880' " white
  let g:terminal_color_8  = '#373b41' " brblack
  let g:terminal_color_9  = '#cc6666' " brred
  let g:terminal_color_10 = '#b5bd68' " brgreen
  let g:terminal_color_11 = '#f0c674' " bryellow
  let g:terminal_color_12 = '#81a2be' " brblue
  let g:terminal_color_13 = '#b294bb' " brmagenta
  let g:terminal_color_14 = '#8abeb7' " brcyan
  let g:terminal_color_15 = '#c5c8c6' " brwhite

  " Neomake
  " Disable inherited syntastic
  let g:syntastic_mode_map = {
    \ "mode": "passive",
    \ "active_filetypes": [],
    \ "passive_filetypes": [] }

  nnoremap <leader>o :lopen<cr>
  nnoremap <leader>oo :lclose<cr>

  let g:neomake_serialize = 1
  let g:neomake_serialize_abort_on_error = 1

" Run NeoMake on read and write operations
  autocmd! BufReadPost,BufWritePost * Neomake

  let g:neomake_javascript_enabled_makers = ['eslint', 'jshint', 'coffeelint']
  let g:neomake_scss_enabled_makers = ['scsslint']
  let g:neomake_css_enabled_makers = ['csslint']
  let g:neomake_markdown_enabled_makers = ['mdl']
  let g:neomake_ruby_enabled_makers = ['mri', 'rubocop', 'reek']
  let g:neomake_html_enabled_makers = ['htmlhint', 'tidy']
  let g:neomake_haml_enabled_makers = ['hamllint']
  let g:neomake_slim_enabled_makers = ['slimlint']
  let g:neomake_elixir_enabled_makers = ['elixir']

  " Use deoplete
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_start_length = 1

  " TMUX complete
  let g:tmuxcomplete#trigger = ''

  " Open terminal in neovim
  nnoremap <leader>r :sp<cr>:terminal<cr>
  nnoremap <leader>rv :vsp<cr>:terminal<cr>

  " Test with neovim
  let test#strategy = "neovim"
  let test#ruby#rspec#executable = 'SPEC_ALL=true bundle exec rspec'

  " Startify header
  let g:ascii = [
          \ '   ____ ____ ____ ____ ____ ____ ',
          \ '  ||n |||e |||o |||v |||i |||m ||',
          \ '  ||__|||__|||__|||__|||__|||__||',
          \ '  |/__\|/__\|/__\|/__\|/__\|/__\|',
          \ ]
  let g:startify_custom_header = g:ascii + startify#fortune#boxed()

  set inccommand=split
endif
